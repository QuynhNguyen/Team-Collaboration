// Generated by CoffeeScript 1.3.3
(function() {
  var Project, connection, mongoose,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  mongoose = require('mongoose');

  connection = require('../utils/DBConnection.js');

  Project = (function() {

    function Project(name, project, Project, db) {
      var projectName, schema;
      this.name = name;
      this.project = project;
      this.Project = Project;
      this.db = db;
      this.deleteProject = __bind(this.deleteProject, this);

      this.getProject = __bind(this.getProject, this);

      this.getProjectList = __bind(this.getProjectList, this);

      this.save = __bind(this.save, this);

      this.db = connection.createMongoDBConnection();
      schema = mongoose.Schema({
        name: 'string'
      });
      this.Project = this.db.model("Project", schema);
      projectName = this.name;
      console.log("this is project name " + this.name + " and this is project name " + projectName);
      this.project = new this.Project({
        name: projectName
      });
      console.log("create new project db");
    }

    Project.prototype.save = function(res) {
      var _this = this;
      return this.project.save(function(err, proj) {
        if (err) {
          res.contentType = 'json';
          res.send(404, {
            error: 'erorr saving project'
          });
        } else {
          console.log("saved project");
          res.contentType = 'json';
          res.send({
            success: "" + _this.name + " has been saved",
            _id: "" + proj._id
          });
        }
        return _this.db.close();
      });
    };

    Project.prototype.getProjectList = function(res) {
      var _this = this;
      return this.Project.find(function(err, projects) {
        res.contentType = 'json';
        res.send(projects);
        return _this.db.close();
      });
    };

    Project.prototype.getProject = function(res, projectName) {
      var _this = this;
      console.log(projectName);
      return this.Project.find({
        name: projectName
      }).exec(function(err, project) {
        console.log(project.length);
        if (project.length <= 0) {
          res.send({
            error: "No Project Found Under The Name Of " + projectName
          });
          res.end();
        } else {
          res.contentType = 'json';
          res.send(200, project);
        }
        return _this.db.close();
      });
    };

    Project.prototype.deleteProject = function(res, projectID) {
      var _this = this;
      return this.Project.findByIdAndRemove(projectID, function() {
        console.log("deleting shit");
        res.contentType = 'json';
        res.send(200, {
          success: "Delete Project Request Executed"
        });
        return _this.db.close();
      });
    };

    return Project;

  })();

  module.exports.Project = Project;

}).call(this);
