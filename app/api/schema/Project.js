// Generated by CoffeeScript 1.3.3
(function() {
  var Project, connection, mongoose,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  mongoose = require('mongoose');

  connection = require('../utils/DBConnection.js');

  Project = (function() {

    function Project(name, project, Project, db) {
      var projectName, schema;
      this.name = name;
      this.project = project;
      this.Project = Project;
      this.db = db;
      this.updateProject = __bind(this.updateProject, this);

      this.deleteProject = __bind(this.deleteProject, this);

      this.getProject = __bind(this.getProject, this);

      this.getProjectList = __bind(this.getProjectList, this);

      this.save = __bind(this.save, this);

      this.db = connection.createMongoDBConnection();
      schema = mongoose.Schema({
        name: {
          type: 'string',
          required: true
        }
      });
      this.Project = this.db.model("Project", schema);
      projectName = this.name;
      this.project = new this.Project({
        name: projectName
      });
    }

    Project.prototype.save = function(res) {
      var _this = this;
      return this.Project.find({
        name: this.name
      }).exec(function(err, projectFound) {
        if (projectFound.length > 0) {
          res.contentType = 'json';
          res.send(404, {
            error: "" + _this.name + " is already existed."
          });
          return _this.db.close();
        } else {
          return _this.project.save(function(err, proj) {
            if (err) {
              res.contentType = 'json';
              res.send(404, {
                error: 'project name must be unique and not empty'
              });
            } else {
              console.log("saved project");
              res.contentType = 'json';
              res.send(proj);
            }
            return _this.db.close();
          });
        }
      });
    };

    Project.prototype.getProjectList = function(res) {
      var _this = this;
      return this.Project.find().sort('field name').exec(function(err, projects) {
        res.contentType = 'json';
        res.send(projects);
        return _this.db.close();
      });
    };

    Project.prototype.getProject = function(res, projectName) {
      var _this = this;
      console.log(projectName);
      return this.Project.find({
        name: projectName
      }).exec(function(err, project) {
        console.log(project.length);
        if (project.length <= 0) {
          res.send(404, {
            error: "No Project Found Under The Name Of " + projectName
          });
          res.end();
        } else {
          res.contentType = 'json';
          res.send(200, project);
        }
        return _this.db.close();
      });
    };

    Project.prototype.deleteProject = function(res, projectID) {
      var _this = this;
      return this.Project.findByIdAndRemove(projectID, function() {
        console.log("deleting shit");
        res.contentType = 'json';
        res.send(200, {
          success: "Delete Project Request Executed"
        });
        return _this.db.close();
      });
    };

    Project.prototype.updateProject = function(res, projectID, projectName) {
      var _this = this;
      return this.Project.find({
        name: projectName
      }).exec(function(err, projectCollection) {
        console.log(projectCollection.length);
        if (projectCollection.length > 0) {
          res.send(404, {
            error: "" + projectName + " is already existed"
          });
          return _this.db.close();
        } else {
          return _this.Project.findById(projectID, function(err, proj) {
            proj.name = projectName;
            return proj.save(function() {
              res.contentType = 'json';
              res.send(200, {
                success: "Project has been updated"
              });
              return _this.db.close();
            });
          });
        }
      });
    };

    return Project;

  })();

  module.exports.Project = Project;

}).call(this);
